import tensorflow as tf

class SplitLayer(tf.keras.layers.Layer):
    def __init__(self, scale, axis=2, **kwargs):
        super().__init__(**kwargs)
        self.scale, self.axis = scale, axis
    def call(self, x):
        return tf.split(x, num_or_size_splits=self.scale, axis=self.axis)

class AAM(tf.keras.layers.Layer):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.score = tf.keras.layers.Dense(1, activation="relu")
    def call(self, splits):
        scores = [self.score(tf.reduce_mean(sp, axis=1)) for sp in splits]  # (B,1)*scale
        alpha = tf.nn.softmax(tf.concat(scores, axis=1), axis=1)            # (B,scale)
        outs = []
        for i, sp in enumerate(splits):
            a = tf.reshape(alpha[:, i], [-1, 1, 1])
            outs.append(sp * a)
        return tf.concat(outs, axis=-1)

def MSA_LK(x, base_kernel, branch_kernels, width, stride, padding="same", use_attention=True):
    scale = len(branch_kernels)
    x0 = tf.keras.layers.Conv1D(filters=scale * width, kernel_size=base_kernel, strides=stride, padding=padding)(x)
    if scale > 1:
        splits = SplitLayer(scale)(x0)
        splits = [tf.keras.layers.Conv1D(width, k, padding="same")(sp) for sp, k in zip(splits, branch_kernels)]
        att_out = AAM()(splits) if use_attention else tf.concat(splits, axis=-1)
        x = tf.keras.layers.add([x0, att_out])
        x = tf.keras.layers.BatchNormalization()(x)
        x = tf.keras.layers.Activation("relu")(x)
        return x
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Activation("relu")(x)
    return x

def MULTIMLMOD(num_classes):
    inp = tf.keras.layers.Input(shape=(1024, 1))
    kernels = [1, 3]
    use_attention = True

    x = MSA_LK(inp, 96, kernels, 48, 2, use_attention=use_attention)
    x = MSA_LK(x,   96, kernels, 56, 2, use_attention=use_attention)
    x = MSA_LK(x,   96, kernels, 56, 2, use_attention=use_attention)
    x = MSA_LK(x,   96, kernels, 64, 2, use_attention=use_attention)

    gap  = tf.keras.layers.GlobalAveragePooling1D()(x)
    out = tf.keras.layers.Dense(num_classes, activation="softmax")(gap)
    model = tf.keras.Model(inputs=inp, outputs=out)
    model.compile(optimizer=tf.keras.optimizers.Adam(1e-3),
                  loss=tf.keras.losses.CategoricalCrossentropy(),
                  metrics=["accuracy"])
    return model
